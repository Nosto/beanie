//file:noinspection GrUnresolvedAccess
//file:noinspection GroovyAssignabilityCheck
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath group: 'com.diffplug.spotless', name: 'spotless-plugin-gradle', version: '6.25.0'
        classpath group: 'gradle.plugin.com.github.spotbugs.snom', name: 'spotbugs-gradle-plugin', version: '4.7.5'
        classpath group: 'net.ltgt.gradle', name: 'gradle-errorprone-plugin', version: '4.0.1'
        classpath group: 'net.ltgt.gradle', name: 'gradle-nullaway-plugin', version: '2.0.0'
        classpath group: 'gradle.plugin.com.dorongold.plugins', name: 'task-tree', version: '1.5'
        classpath (group: 'gradle.plugin.com.github.johnrengelman', name: 'shadow', version: '7.1.2') {
            because 'Shadow 8.x requires Gradle 8.x'
        }
    }
}

allprojects { project ->

    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: "jacoco"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: 'com.diffplug.spotless'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'net.ltgt.nullaway'
    apply plugin: "com.dorongold.task-tree"

    group 'com.nosto.beanie'
    version '3.2.0-SNAPSHOT-1725446020803'

    repositories {
        mavenCentral()
        maven {
            name = "nexus"
            url = "$mavenNexusUrl"
            credentials {
                username = "$mavenUser"
                password = "$mavenPassword"
            }
        }
    }

    dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.11.0'
        testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.11.0'
        compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.8.6'
        testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.8.6'
        errorprone group: 'com.uber.nullaway', name: 'nullaway', version: '0.11.2'
        errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.30.0'
        spotbugsPlugins group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: '1.13.0'
    }

    // Configuration for the nullaway extension. The rest of the parameters must be
    // specified on the java-compile tasks. The only option that be specified here
    // is the name of the root package to be analysed.
    nullaway {
        //noinspection GrUnresolvedAccess
        annotatedPackages.add("com.nosto")
    }

    // Configuration for the Jacoco plugin. It seems that it isn't possible to define
    // the output report formats here and those seem to be defined on the individual
    // task level.
    // I'm not sure why the tool version is defined here and it isn't managed as a
    // dependency.
    jacoco {
        toolVersion = "0.8.12"
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
    jacocoTestReport {
        reports {
            csv.required.set(true)
            xml.required.set(false)
            html.required.set(true)
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events = [TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED]
        }
        reports {
            junitXml.required.set(true)
            html.required.set(true)
        }
        maxParallelForks = (Runtime.runtime.availableProcessors() / 2 + 1) as int
        finalizedBy(tasks.named('jacocoTestReport')) // report is always generated after tests run
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
    }

    javadoc {
        options.addBooleanOption('html5', true)
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17

        withSourcesJar()
        withJavadocJar()
    }

    // Configuration for the Spotbugs plugin. It seems that it isn't possible to define
    // the output report formats here and those seem to be defined on the individual
    // task level.
    // I'm not sure why the tool version is defined here and it isn't managed as a
    // dependency.
    spotbugs {
        //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
        toolVersion = '4.8.6'
        //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
        ignoreFailures = true
        //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
        effort = 'max'
        // Exclude all *.scala files as Spotbugs doesn't work too well with Scala.
        //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
        excludeFilter = file("$rootDir/gradle/config/spotbugs/exclude.xml")
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
    spotbugsMain {
        //noinspection GroovyAssignabilityCheck
        reports {
            xml.enabled = true
        }
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
    spotbugsTest {
        //noinspection GroovyAssignabilityCheck
        reports {
            xml.enabled = true
        }
    }

    // Configuration for the Checkstyle plugin. It seems that it isn't possible to define
    // the output report formats here and those seem to be defined on the individual
    // task level.
    // I'm not sure why the tool version is defined here and it isn't managed as a
    // dependency.
    checkstyle {
        toolVersion "10.18.1"
        config rootProject.resources.text.fromFile("gradle/config/checkstyle/checkstyle.xml")
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed
    // and must be explicitly disabled
    checkstyleMain {
        reports {
            xml.required.set(true)
            html.required.set(false)
        }
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
    checkstyleTest {
        reports {
            xml.required.set(true)
            html.required.set(false)
        }
    }

    publishing {
        repositories {
            maven {
                name = "nexus"
                url = "$mavenNexusUrl"
                credentials {
                    username = "$mavenUser"
                    password = "$mavenPassword"
                }
            }
            maven {
                name = "github"
                url = uri("https://maven.pkg.github.com/nosto/beanie")
                credentials {
                    username = "$mavenUser"
                    password = "$mavenPassword"
                }
            }
        }
        publications {
            //noinspection GroovyAssignabilityCheck
            maven(MavenPublication) {
                //noinspection GroovyAssignabilityCheck
                from components.java

                pom {
                    //noinspection GroovyAssignabilityCheck
                    name = 'Beanie'
                    //noinspection GroovyAssignabilityCheck
                    description = 'A simple library to sanity-check your bean ser-deser'
                    //noinspection GroovyAssignabilityCheck
                    url = 'https://github.com/nosto/beanie'
                    licenses {
                        license {
                            //noinspection GroovyAssignabilityCheck
                            name = 'The Apache Software License, Version 2.0'
                            //noinspection GroovyAssignabilityCheck
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            //noinspection GroovyAssignabilityCheck
                            distribution = 'repo'
                        }
                    }
                    scm {
                        //noinspection GroovyAssignabilityCheck
                        connection = 'scm:git:git://github.com/nosto/beanie.git'
                        //noinspection GroovyAssignabilityCheck
                        developerConnection = 'scm:git:ssh://github.com/nosto/beanie.git'
                        //noinspection GroovyAssignabilityCheck
                        url = 'https://github.com/nosto/beanie'
                    }
                    issueManagement {
                        //noinspection GroovyAssignabilityCheck
                        system = "Github"
                        //noinspection GroovyAssignabilityCheck
                        url = "https://github.com/nosto/beanie/issues"
                    }
                }
            }
        }
    }
}

// Task for building the zip file for upload
task buildZip(type: Zip) {
    zip64 = true
    archiveBaseName.set(rootProject.name)
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

shadowJar {
    zip64 true
}

build {
    dependsOn buildZip
}
