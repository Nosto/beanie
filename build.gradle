//file:noinspection GrUnresolvedAccess
//file:noinspection GroovyAssignabilityCheck
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:5.12.4"
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.1"
        classpath "net.ltgt.gradle:gradle-errorprone-plugin:2.0.1"
        classpath "net.ltgt.gradle:gradle-nullaway-plugin:1.1.0"
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"
    }
}

allprojects { project ->

    apply plugin: 'java'
    apply plugin: 'checkstyle'
    //apply plugin: 'scalaStyle'
    //apply plugin: 'scala'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'net.ltgt.nullaway'
    apply plugin: "com.dorongold.task-tree"
    apply plugin: "jacoco"

    group 'com.nosto'
    version '1.0.9'

    repositories {
        mavenCentral()
        maven {
            url 'https://maven.onehippo.com/maven2/'
        }
    }

    dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.2.0'
        testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.2.0'
        compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '3.1.3'
        testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '3.1.3'
        errorprone group: 'com.uber.nullaway', name: 'nullaway', version: '0.9.1'
        errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.6.0'
        spotbugsPlugins group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: '1.10.1'
    }

    // Configuration for the nullaway extension. The rest of the parameters must be
// specified on the java-compile tasks. The only option that be specified here
// is the name of the root package to be analysed.
    nullaway {
        //noinspection GrUnresolvedAccess
        annotatedPackages.add("com.nosto")
    }

// Configuration for the Scalastyle plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
    /*scalaStyle {
        configLocation "project/scalastyle_config.xml"
    }*/

// Configuration for the Jacoco plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
    jacoco {
        toolVersion = "0.8.5"
    }

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
    jacocoTestReport {
        reports {
            csv.enabled = true
            xml.enabled = false
            html.enabled = true
        }
    }

    test {
        useJUnitPlatform()
        testLogging.events.addAll([TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED])
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
        maxParallelForks = (int) (Runtime.runtime.availableProcessors() / 2 + 1)
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
    }
    
    javadoc {
        options.addBooleanOption('html5', true)
    }

    /*scaladoc {
        scalaDocOptions.additionalParameters = ['-no-link-warnings']
    }*/

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    /*task scaladocJar(type: Jar, dependsOn: scaladoc) {
        archiveClassifier.set("javadoc")
        from scaladoc.destinationDir
    }*/

    java {
        withSourcesJar()
        withJavadocJar()
    }

    // Configuration for the Spotbugs plugin. It seems that it isn't possible to define
    // the output report formats here and those seem to be defined on the individual
    // task level.
    // I'm not sure why the tool version is defined here and it isn't managed as a
    // dependency.
    spotbugs {
        //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
        toolVersion = '4.0.2'
        //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
        ignoreFailures = true
        //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
        effort = 'max'
        // Exclude all *.scala files as Spotbugs doesn't work too well with Scala.
        //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
        excludeFilter = file("$rootDir/gradle/config/spotbugs/exclude.xml")
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
    spotbugsMain {
        //noinspection GroovyAssignabilityCheck
        reports {
            xml.enabled = true
        }
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
    spotbugsTest {
        //noinspection GroovyAssignabilityCheck
        reports {
            xml.enabled = true
        }
    }

    // Configuration for the Checkstyle plugin. It seems that it isn't possible to define
    // the output report formats here and those seem to be defined on the individual
    // task level.
    // I'm not sure why the tool version is defined here and it isn't managed as a
    // dependency.
    checkstyle {
        toolVersion "7.6.1"
        config rootProject.resources.text.fromFile("gradle/config/checkstyle/checkstyle.xml")
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed
    // and must be explicitly disabled
    checkstyleMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    // We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
    checkstyleTest {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    publishing {
        repositories {
            maven {
                name = "github"
                url = uri("https://maven.pkg.github.com/nosto/beanie")
                credentials(PasswordCredentials)
            }
        }
        publications {
            //noinspection GroovyAssignabilityCheck
            maven(MavenPublication) {
                //noinspection GroovyAssignabilityCheck
                from components.java

                pom {
                    //noinspection GroovyAssignabilityCheck
                    name = 'Beanie'
                    //noinspection GroovyAssignabilityCheck
                    description = 'A simple library to sanity-check your bean ser-deser'
                    //noinspection GroovyAssignabilityCheck
                    url = 'https://github.com/nosto/beanie'
                    licenses {
                        license {
                            //noinspection GroovyAssignabilityCheck
                            name = 'The Apache Software License, Version 2.0'
                            //noinspection GroovyAssignabilityCheck
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            //noinspection GroovyAssignabilityCheck
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            //noinspection GroovyAssignabilityCheck
                            id = 'ollik1'
                            //noinspection GroovyAssignabilityCheck
                            name = 'Olli Kuonanoja'
                            //noinspection GroovyAssignabilityCheck
                            email = 'olli@nosto.com'
                        }
                        developer {
                            //noinspection GroovyAssignabilityCheck
                            id = 'mridang'
                            //noinspection GroovyAssignabilityCheck
                            name = 'Mridang Agarwalla'
                            //noinspection GroovyAssignabilityCheck
                            email = 'mridang@nosto.com'
                        }
                    }
                    scm {
                        //noinspection GroovyAssignabilityCheck
                        connection = 'scm:git:git://github.com/nosto/beanie.git'
                        //noinspection GroovyAssignabilityCheck
                        developerConnection = 'scm:git:ssh://github.com/nosto/beanie.git'
                        //noinspection GroovyAssignabilityCheck
                        url = 'https://github.com/nosto/beanie'
                    }
                    issueManagement {
                        //noinspection GroovyAssignabilityCheck
                        system = "Github"
                        //noinspection GroovyAssignabilityCheck
                        url = "https://github.com/nosto/beanie/issues"
                    }
                }
            }
        }
    }
}