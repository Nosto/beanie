plugins {
    id 'java'
    id 'checkstyle'
    id 'maven-publish'
    id 'java-library'
    id 'java-test-fixtures'
    id "jacoco"
    id "com.github.johnrengelman.shadow"
    id 'com.diffplug.spotless'
    id "com.github.spotbugs"
    id "net.ltgt.errorprone"
    id 'net.ltgt.nullaway'
    id "com.dorongold.task-tree"
    id 'net.idlestate.gradle-duplicate-classes-check'
    id "org.jetbrains.qodana"
    //id "org.jetbrains.intellij"
    id "com.github.hierynomus.license-report"
    id "io.snyk.gradle.plugin.snykplugin"
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.onehippo.com/maven2/"
    }
    maven {
        name = "mridang"
        url = uri("https://maven.pkg.github.com/nosto/beanie")
        credentials {
            username = project.findProperty("githubUsername") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("githubPassword") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    errorprone group: 'com.uber.nullaway', name: 'nullaway', version: '0.9.6'
    errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.12.1'
    spotbugsPlugins group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: '1.12.0'
    //checkstyle group: 'io.spring.nohttp', name: 'nohttp-checkstyle', version: '0.0.10'
}

/*
 *  Copyright (c) 2024 Nosto Solutions Ltd All Rights Reserved.
 *
 *  This software is the confidential and proprietary information of
 *  Nosto Solutions Ltd ("Confidential Information"). You shall not
 *  disclose such Confidential Information and shall use it only in
 *  accordance with the terms of the agreement you entered into with
 *  Nosto Solutions Ltd.
 */

// Configuration for the nullaway extension. The rest of the parameters must be
// specified on the java-compile tasks. The only option that be specified here
// is the name of the root package to be analysed.
nullaway {
    annotatedPackages.add("com.nosto")
}

// Configuration for the Jacoco plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
jacoco {
    toolVersion = "0.8.10"
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
jacocoTestReport {
    reports {
        csv.required.set(true)
        xml.required.set(false)
        html.required.set(true)
    }
    dependsOn(test) // tests are required to run before generating the report
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        junitXml.required.set(true)
        html.required.set(true)
        }
    maxParallelForks = (Runtime.runtime.availableProcessors() / 2 + 1) as int
    finalizedBy(jacocoTestReport) // report is always generated after tests run
}

javadoc {
    options {
        addBooleanOption('html5', true)
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn(tasks.named('classes'))
    archiveClassifier.set("sources")
    from(sourceSets.main.allSource)
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
    withJavadocJar()
}

// Configuration for the Spotbugs plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
spotbugs {
    toolVersion = '4.8.6'
    ignoreFailures = true
    effort = 'max'
    // Exclude all *.scala files as Spotbugs doesn't work too well with Scala.
    excludeFilter = file("$rootDir/gradle/config/spotbugs/exclude.xml")
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
spotbugsMain {
    reports {
        sarif.required.set(true)
        xml.required.set(true)
    }
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
spotbugsTest {
    reports {
        sarif.required.set(true)
        xml.required.set(true)
    }
}

// Configuration for the Checkstyle plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
checkstyle {
    toolVersion = "10.18.1"
    config = rootProject.resources.text.fromFile("gradle/config/checkstyle/checkstyle.xml")
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed
// and must be explicitly disabled
checkstyleMain {
    reports {
        xml.required.set(true)
        html.required.set(false)
    }
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
checkstyleTest {
    reports {
        xml.required.set(true)
        html.required.set(false)
    }
}

// Task for building the zip file for upload
tasks.register('buildZip', Zip) {
    zip64 = true
    archiveFileName.set("${rootProject.name}.zip")
    from(compileJava)
    from(processResources)
    into('lib') {
        from(configurations.runtimeClasspath) // TODO: Check for imagevector
    }
}

shadowJar {
    zip64 = true
}

build {
    dependsOn(tasks.named('buildZip'))
}

qodana {
    saveReport = true
}


checkForDuplicateClasses {
    dependsOn assemble
    excludes(['LICENSE',
              '^com/sun/.*',
              '^javax/.*',
              '^org/apache/commons/logging/*',
    ])
    configurationsToCheck configurations.runtimeClasspath
}


downloadLicenses {
    dependencyConfiguration = 'implementation'
    includeProjectDependencies = true
}

configurations.implementation.setCanBeResolved(true)
configurations.api.setCanBeResolved(true)

snyk {
    arguments = '--all-sub-projects --remote-repo-url=Nosto/fortknox --org=nosto'
}
